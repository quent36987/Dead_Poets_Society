version: '3'

services:
  # Public API to get any data from the database
  api-get-express:
    build: ./api-get-express/
    image: api-get-express
    container_name: api-get-express
    restart: unless-stopped
    depends_on:
      - postgresql
    labels:
      - traefik.enable=true
      - traefik.http.routers.api-get-express.rule=Host(`get.docker.localhost`)
      - traefik.http.routers.api-get-express.entrypoints=web-secure
      - traefik.http.routers.api-get-express.tls=true
      - traefik.docker.network=traefik-network
    ports:
      - 3000:3000
    networks:
        - bdd
        - traefik-network

  # Private API who work with the keycloak server to authenticate the user and modify the database
  api-python:
    build: api-python/
    image: api-python
    container_name: api-python
    restart: unless-stopped
    depends_on:
        - postgresql
        - keycloak
        - api-get-express
    labels:
      - traefik.enable=true
      - traefik.http.routers.api-python.rule=Host(`python.docker.localhost`)
      - traefik.http.routers.api-python.entrypoints=web-secure
      - traefik.http.routers.api-python.tls=true
      - traefik.docker.network=traefik-network
    networks:
      - bdd
      - keycloak
      - traefik-network
    ports:
      - 5001:5001

  # Database to store all the data
  postgresql:
    image: postgres:14.1-alpine
    restart: unless-stopped
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
    networks:
      - bdd

  # The reverse proxy to redirect the request to the good server
  traefik:
    image: traefik
    container_name: "traefik"
    networks:
      - traefik-network
    ports:
      - "80:80"
      - "443:443"
      - 8081:8080
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`monitor.docker.localhost`)
      - traefik.http.routers.traefik.entrypoints=web-secure
      - traefik.http.routers.traefik.tls=true
      - traefik.docker.network=traefik-network
      - traefik.http.routers.traefik.service=api@internal

    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/certs:/etc/certs:ro
      - ./traefik/config.yml:/etc/traefik/config.yml:ro

    restart: unless-stopped


  # Keycloak server to authenticate the user
  keycloak:
    image: jboss/keycloak:latest
    restart: on-failure
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=password
      - DB_VENDOR=postgres
      - DB_USER=admin
      - DB_PASSWORD=password
      - DB_ADDR=keycloak-db
      - DB_PORT=5432
      - DB_DATABASE=keycloakdb
      - PROXY_ADDRESS_FORWARDING=true
    depends_on:
      - keycloak-db
    ports:
        - 8080:8080
    networks:
      - keycloak

  keycloak-db:
    image: postgres:10
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: keycloakdb
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - keycloak





volumes:
  # Volume to store keycloak config
  pgdata:

  # Volume to store the database
  db:
    driver: local

networks:
    # Network to connect the api and the database
    bdd:

    # Network to connect the api to keycloak
    keycloak:

    # Network to connect the api to traefik (reverse proxy)
    traefik-network:
      name: traefik-network




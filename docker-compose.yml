version: '3'

services:
  # Public API to get any data from the database
  api-get-express:
    build: ./api-get-express/
    image: api-get-express
    container_name: api-get-express
    restart: unless-stopped
    depends_on:
      - postgresql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      DATABASE_URL: ${DATABASE_URL}
    ports:
      - 3000:3000
    networks:
        - api-get-express-network
        - bdd-network

  # Private API who work with the keycloak server to authenticate the user and modify the database
  api-python:
    build: ./api-python/
    image: api-python
    container_name: api-python
    restart: unless-stopped
    depends_on:
        - postgresql
        - keycloak
        - api-get-express
        - redis
    networks:
      - api-python-network
      - redis-network
      - bdd-network
    ports:
      - 5003:5001

  # Front in React (with ngnix)
  front-js:
      build: ./dps-front/
      image: front
      container_name: front
      restart: unless-stopped
      depends_on:
          - api-python
          - api-get-express
      networks:
        - front-network
      ports:
        - "8083:80"

  # Subscriber to get the logs from the api-python
  sub-log:
    build: ./sub-log/
    image: sub-log
    container_name: sub-log
    restart: unless-stopped
    depends_on:
        - api-python
        - redis
    networks:
      - redis-network

  # Redis to publish and subscribe to the api-python
  redis:
    image: redis:6.2.5-alpine
    restart: unless-stopped
    networks:
      - redis-network
    ports:
    - 6379:6379

  # Database to store all the data
  postgresql:
    image: postgres:14.1-alpine
    restart: unless-stopped
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    networks:
      - bdd-network

  # Reverse proxy to redirect the request to the good container
  apache-oidc:
    build: ./apache-oidc
    networks:
      - keycloak-network
      - api-python-network
      - api-get-express-network
      - bdd-network
      - front-network
    ports:
      - "80:80"
      - "443:443"
    environment:
      OIDC_PROVIDER_METADATA_URL: ${OIDC_PROVIDER_METADATA_URL}
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID}
      OIDC_CLIENT_SECRET: ${OIDC_CLIENT_SECRET}
      OIDC_CRYPTO_PASSPHRASE: ${OIDC_CRYPTO_PASSPHRASE}
      DOMAIN: ${DOMAIN}

  # Keycloak server to authenticate the user
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    networks:
      - keycloak-network
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      - ./keycloak:/opt/keycloak/data/import:ro
      - pgdata:/opt/keycloak/data
    command: start-dev --import-realm --proxy edge --hostname-strict=false --hostname-url="https://dps.epita.local/auth" --hostname-admin-url="https://dps.epita.local/auth"

volumes:
  # Volume to store keycloak config
  pgdata:

  # Volume to store the database
  db:
    driver: local

networks:
    # Network to connect the api to traefik (reverse proxy)
    keycloak-network:
    api-python-network:
    api-get-express-network:
    bdd-network:
    front-network:
    sub-log-network:
    redis-network:



